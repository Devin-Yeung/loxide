---
source: crates/loxide_parser/src/parser.rs
expression: results
---
(
    [
        Stmt {
            kind: Expression(
                Expr {
                    kind: Binary(
                        BinaryExpr {
                            lhs: Expr {
                                kind: Literal(
                                    Number(
                                        1.0,
                                    ),
                                ),
                                span: [Span],
                            },
                            rhs: Expr {
                                kind: Literal(
                                    Number(
                                        2.0,
                                    ),
                                ),
                                span: [Span],
                            },
                            operator: Plus,
                        },
                    ),
                    span: [Span],
                },
            ),
            span: [Span],
        },
        Stmt {
            kind: Expression(
                Expr {
                    kind: Binary(
                        BinaryExpr {
                            lhs: Expr {
                                kind: Literal(
                                    Number(
                                        3.0,
                                    ),
                                ),
                                span: [Span],
                            },
                            rhs: Expr {
                                kind: Literal(
                                    Number(
                                        4.0,
                                    ),
                                ),
                                span: [Span],
                            },
                            operator: Plus,
                        },
                    ),
                    span: [Span],
                },
            ),
            span: [Span],
        },
        Stmt {
            kind: Expression(
                Expr {
                    kind: Literal(
                        Boolean(
                            true,
                        ),
                    ),
                    span: [Span],
                },
            ),
            span: [Span],
        },
        Stmt {
            kind: Expression(
                Expr {
                    kind: Literal(
                        Boolean(
                            false,
                        ),
                    ),
                    span: [Span],
                },
            ),
            span: [Span],
        },
        Stmt {
            kind: Expression(
                Expr {
                    kind: Literal(
                        Nil,
                    ),
                    span: [Span],
                },
            ),
            span: [Span],
        },
    ],
    [
        UnexpectedToken {
            span: [Span],
            expected: "primary expression",
            found: ";",
        },
        UnexpectedToken {
            span: [Span],
            expected: "primary expression",
            found: ";",
        },
        UnexpectedToken {
            span: [Span],
            expected: "primary expression",
            found: ";",
        },
    ],
)
